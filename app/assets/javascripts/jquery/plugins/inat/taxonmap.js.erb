var inatTaxonMap = { };

(function($) {
  $.fn.taxonMap = function( options ) {
    options = options || { }
    $(this).each( function( ) {
      if ( options == 'fit' ) {
        inatTaxonMap.fit( this );
      } else {
        inatTaxonMap.setup( this, options );
      }
    });
  }
}(jQuery))

inatTaxonMap.setup = function ( elt, options ) {
  var options = $.extend( { }, options );
  options.taxonID = $(elt).data('taxon-id');
  options.latitude = options.latitude || $(elt).data('latitude');
  options.longitude = options.longitude || $(elt).data('longitude');
  options.mapType = $(elt).data('map-type');
  options.zoomLevel = parseInt( $(elt).data('zoom-level') );
  options.gbifKmlUrl = $(elt).data('gbif-kml');
  options.showRange = $(elt).data('show-range');
  options.placeGeomID = $(elt).data('place-geom-id');
  options.minX = $(elt).data('min-x');
  options.minY = $(elt).data('min-y');
  options.maxX = $(elt).data('max-x');
  options.maxY = $(elt).data('max-y');
  options.observations = options.observations || $(elt).data('observations');
  // turn the observations JSON into proper JavaScript objects
  if( options.observations ) {
    options.observations = _.map( options.observations, function( observation ) {
      return jQuery.parseJSON( observation );
    });
  }
  // Make sure these two values are null if seemingly unassigned
  if (options.gbifKmlUrl === '') {
    options.gbifKmlUrl = null;
  }
  if (options.zoomLevel === 0) {
    options.zoomLevel = null;
  }

  $(elt).data('taxonMapOptions', options)
  inatTaxonMap.setupGoogle(elt)
};

inatTaxonMap.fit = function( elt ) {
  inatTaxonMap.fitGoogle( elt );
};

inatTaxonMap.setupGoogle = function( elt ) {
  var options = $(elt).data('taxonMapOptions'),
      map = iNaturalist.Map.createMap({div: elt}),
      preserveViewport = options.preserveViewport
  if (options.minX) {
    map.fitBounds(
      new google.maps.LatLngBounds(
        new google.maps.LatLng(options.minY, options.minX),
        new google.maps.LatLng(options.maxY, options.maxX)
      )
    )
    preserveViewport = true
  } else {
    if (options.latitude || options.longitude) {
      map.setCenter(new google.maps.LatLng(options.latitude || 0, options.longitude || 0))
    }
    if (options.zoomLevel) {
      map.setZoom(options.zoomLevel)
    }
  }

  if (options.mapType) {
    map.setMapTypeId(options.mapType)
  }

  if (options.gbifKmlUrl) {
    var gbifLyr = new google.maps.KmlLayer(options.gbifKmlUrl, {suppressInfoWindows: true, preserveViewport: true})
    map.addOverlay(I18n.t('taxon_map.gbif_occurrences'), gbifLyr, {
      id: 'gbif-'+options.taxonID,
      hidden: true,
      description:
        I18n.t('taxon_map.it_may_take_google_a_while_to') +
        ' <a target="_blank" href="'+options.gbifKmlUrl.replace(/&format=kml/, '')+'">' + I18n.t('taxon_map.data_url') + '</a>'
    })
    google.maps.event.addListener(gbifLyr, 'click', function(e) {
      if (!window['kmlInfoWindows']) window['kmlInfoWindows'] = {}
      for (var k in window['kmlInfoWindows']) {
        window['kmlInfoWindows'][k].close()
      }
      var win = window['kmlInfoWindows'][e.featureData.id]
      if (!win) {
        // filter out google's insane parsing
        var content = (e.featureData.description || '').replace(/(<a.+?>)<a.+?>(.+?)<\/a><\/a>/g, "$1$2</a>")
        content = content.replace(/&lt;\/a/g, '')
        content = content.replace(/&gt;/g, '')
        content = content.replace(/<\/a"/g, '"')
        win = window['kmlInfoWindows'][e.featureData.id] = new google.maps.InfoWindow({
          content: content,
          position: e.latLng,
          pixelOffset: e.pixelOffset
        })
      }
      win.open(map)
      return false
    })
  }

  if (options.showRange) {
    map.addTaxonRangeLayer({ taxon_id: options.taxonID });
    map.controls[google.maps.ControlPosition.TOP_RIGHT].push(new iNaturalist.OverlayControl(map));
  }

  if (options.placeGeomID) {
    map.addPlaceLayer({ place_id: options.placeGeomID });
  }

  if (options.taxonID) {
    gridOptions = { taxon_id: options.taxonID };
    if( options.observations && options.observations.length === 1 ) {
      gridOptions.observation_id = options.observations[0].id;
    }
    map.addObservationsLayer(gridOptions);
  }

  if (options.observations) {
    _.each(options.observations, function( observation ) {
      map.addObservation(observation, { clickable: options.clickable, showAccuracy: options.showAccuracy })
      if (!observation.map_scale && observation.positional_accuracy) {
        var c = new google.maps.Circle({
          center: new google.maps.LatLng(observation.latitude, observation.longitude),
          radius: observation.positional_accuracy * 10
        })
      }
      if (observation.marker) {
        // Bind the clicks on the obs icon to popup the infowindow
        $('#observation-'+this.id).click(function() {
          if ($(this).parents('.observations').hasClass('mini')) {
            map.openInfoWindow.apply(observation.marker);
          };
        });
      };
    });
    if( !preserveViewport ) {
      if( options.observations.length === 1 ) {
        observation = options.observations[0];
        var center = new google.maps.LatLng(
          observation.private_latitude || observation.latitude,
          observation.private_longitude || observation.longitude);
        map.setCenter(center);
        // TODO: what does this do? Do we still need it?
        // google.maps.event.addListenerOnce(map, 'idle', function() {
        //   if (observation._circle) {
        //     map.fitBounds(map.getBounds().union(observation._circle.getBounds()))
        //   }
        //   google.maps.event.trigger(map, 'zoom_changed')
        // })
      } else {
        map.zoomToObservations();
      }
    }
  }

  if (!preserveViewport) {
    inatTaxonMap.fit(elt)
  }

  $(elt).data('taxonMap', map)
};

inatTaxonMap.fitGoogle = function( elt ) {
  var options = $(elt).data('taxonMapOptions'),
      map = $(elt).data('taxonMap');
  if (!map) { return; }
  if (options.minX) {
    map.fitBounds(
      new google.maps.LatLngBounds(
        new google.maps.LatLng(options.minY, options.minX),
        new google.maps.LatLng(options.maxY, options.maxX)
      )
    );
    return;
  }
  map.setCenter(new google.maps.LatLng(0, 0));
  map.setZoom(1);
};
