var iNatModels = iNatModels || { };

iNatModels.Taxon = function( attrs ) {
  var that = this;
  _.each( attrs, function( value, attr ) {
    that[ attr ] = value;
  });
};

iNatModels.Taxon.ICONIC_TAXA = <%= Taxon::ICONIC_TAXA.sort.to_json(only: [:id, :name, :rank]) %>;

iNatModels.Taxon.prototype.iconicTaxonName = function( ) {
  var that = this
  var iconicTaxon = _.find(iNatModels.Taxon.ICONIC_TAXA, function(t) {
    return t.id == that.iconic_taxon_id;
  });
  if (iconicTaxon) {
    return iconicTaxon.name;
  } else {
    return 'unknown';
  }
};

iNatModels.Taxon.prototype.photo = function( ) {
  return this.default_photo ? this.default_photo.medium_url : this.default_photo_url;
};

iNatModels.Taxon.prototype.photoTag = function( ) {
  if( this.default_photo ) {
    return "<img src='"+ this.default_photo.square_url +"'/>";
  }
  return "<i class='icon icon-iconic-" + this.iconicTaxonName( ).toLowerCase( ) + "'/>";
};

iNatModels.Taxon.prototype.photoLicenseShort = function( ) {
  if( !this.default_photo ) return;
  if( !this.default_photo.license_code || this.default_photo.license_code == 'c' ) return '©';
  if( this.default_photo.license_code.match(/^cc-/) ) return 'CC';
  return this.default_photo.license_code.toUpperCase();
};

iNatModels.Taxon.prototype.photoAttribution = function( ) {
  return this.default_photo ? (I18n.t('photo') + ': ' + this.default_photo.attribution) : null;
};

iNatModels.Taxon.prototype.establishmentMeansCode = function( ) {
  if( !_.isUndefined( this.establishment_means_code ) ) {
    return this.establishment_means_code;
  }
  switch( this.establishment_means && this.establishment_means.establishment_means ) {
    case "native":
      this.establishment_means_code = "N";
      break;
    case "endemic":
      this.establishment_means_code = "E";
      break;
    case "introduced":
      this.establishment_means_code = "IN";
      break;
    default:
      this.establishment_means_code = null;
  }
  return this.establishment_means_code;
};

iNatModels.Taxon.prototype.conservationStatus = function( ) {
  if( !_.isUndefined( this.conservationStatusName ) ) {
    return this.conservationStatusName;
  }
  switch( this.conservation_status && this.conservation_status.status ) {
    case "NE":
      this.conservationStatusName = I18n.t( 'not_evaluated' );
      break;
    case "DD":
      this.conservationStatusName = I18n.t( 'data_deficient' );
      break;
    case "LC":
      this.conservationStatusName = I18n.t( 'least_concern' );
      break;
    case "NT":
      this.conservationStatusName = I18n.t( 'near_threatened' );
      break;
    case "VU":
      this.conservationStatusName = I18n.t( 'vulnerable' );
      break;
    case "EN":
      this.conservationStatusName = I18n.t( 'endangered' );
      break;
    case "CR":
      this.conservationStatusName = I18n.t( 'critically_endangered' );
      break;
    case "EW":
      this.conservationStatusName = I18n.t( 'extinct_in_the_wild' );
      break;
    case "EX":
      this.conservationStatusName = I18n.t( 'extinct' );
      break;
    default:
      this.conservationStatusName = null;
  }
  return this.conservationStatusName;
};

iNatModels.Taxon.capitalize = function( s ) {
  // var firstLetterIndex = _.findIndex( s, function( char ) { return char.match( /[A-z]/ ); } );
  var firstLetterMatch = s.match( /[A-z]/ );
  var firstLetterIndex = firstLetterMatch ? firstLetterMatch.index : 0;
  var leadingContractionMatch = s.match( /^[a-z]'/ );
  if ( leadingContractionMatch ) {
    firstLetterIndex = 2;
  }
  return s.slice( 0, firstLetterIndex ) + s[firstLetterIndex].toUpperCase( ) + s.slice( firstLetterIndex + 1 );
}

iNatModels.Taxon.titleCaseName = function( name ) {
  if ( !name ) {
    return name;
  }
  // This may or may not be a scalable solution. An alternative would be get
  // these from translation files and have translators add the words that
  // are uncapitalized in their languages
  var uncapitalized = [
    "à",
    "a",
    "and",
    "con",
    "da",
    "dal",
    "de",
    "dei",
    "del",
    "des",
    "di",
    "du",
    "e",
    "in",
    "la",
    "o",
    "of",
    "the"
  ];
  var commonNamePieces = name.split( /\s+/ );
  return _.map( commonNamePieces, function( piece, i ) {
    if ( i > 0 && uncapitalized.indexOf( piece.toLowerCase( ) ) >= 0 ) {
      return piece.toLowerCase( );
    }
    if ( i === commonNamePieces.length - 1 ) {
      return piece.split( "-" ).map( function( s ) {
        if ( uncapitalized.indexOf( s.toLowerCase( ) ) >= 0 ) {
          return s.toLowerCase( );
        }
        return iNatModels.Taxon.capitalize( s );
      } ).join( "-" );
    }
    return iNatModels.Taxon.capitalize( piece );
  } ).join( " " );

}

iNatModels.Taxon.prototype.preferredCommonName = function( options ) {
  options = options || { };
  options.locale = ( options.locale || "en" ).split( "-" )[0];
  var nameInLocale;
  var nameInPlace;
  var nameInAncestorPlace;
  _.each( this.names, function( n ) {
    if( options.preferredPlace && n.place_taxon_names ) {
      if( _.find( n.place_taxon_names, function( ptn ) {
          return ptn.place_id === options.preferredPlace.id; })) {
        nameInPlace = n.name;
      } else if( _.find( n.place_taxon_names, function( ptn ) {
          return _.includes( options.preferredPlace.ancestor_place_ids, ptn.place_id ); })) {
        nameInAncestorPlace = n.name;
      }
    }
    if( !nameInLocale && n.locale === options.locale ) { nameInLocale = n.name; }
  });
  nameInLocale = nameInPlace || nameInAncestorPlace || nameInLocale;
  if( options.defaultToEnglish === true &&
      !nameInLocale && options.locale != "en" ) {
    return this.preferredCommonName( _.extend( { }, options, { locale: "en" } ) );
  }
  return iNatModels.Taxon.titleCaseName( nameInLocale );
};
