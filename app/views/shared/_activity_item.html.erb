<%- 
  item = activity_item || item
  return unless item
  taxon = item.taxon if item.respond_to?(:taxon)
  observation = item.observation if item.respond_to?(:observation)
  user = if item.is_a?(Flag)
    item.resolver
  elsif item.is_a?(ObservationFieldValue)
    item.updater || item.user
  elsif item.respond_to?(:user)
    item.user
  end
  edit_url = case item.class.name
  when "Comment" then edit_comment_path(item)
  when "Identification" then edit_identification_path(item)
  end
  hide_agree ||= false
  no_thumb ||= false
  no_meta ||= false
  context_around ||= nil
  posted_at ||= item.created_at
  posted_at = item.updated_at if item.is_a?(Flag)
-%>
<div id="<%= dom_id(item, 'activity') %>" class="<%= item.class.name.humanize.underscore %>_activity_item item clear stacked">
  <div class="item_user column">
    <% if user && !no_thumb -%>
      <%= link_to image_tag(user.icon.url(:thumb), :class => 'usericon'), person_path(user) %>
    <% end -%>
  </div>
  <div class="item_content last column">
    <%- if item.is_a? Identification %>
      <%= render :partial => "identifications/identification", :locals => { 
        :identification => item,
        :taxon => taxon,
        :observation => observation,
        :user => user,
        :hide_agree => hide_agree
      } %>
    <% elsif item.is_a? ProjectInvitation %>
      <p><%= t :please_add_this_observation_to %></p>
      <%= render :partial => "project_invitations/project_invitation", 
        :object => item,
        :locals => { 
          :observation => observation,
          :truncation_length => 48 } %>
    <% elsif item.is_a? Flag %>
      <div class="stacked body">
        <div class="stacked">
          <span class="meta"><%= t :originally_flagged_by %></span>
          <%= link_to_user item.user %>: "<%= item.flag %>"
        </div>
        <%= t(:flag_marked_as_resolved_html).html_safe %>
        <% unless item.comment.blank? %>
          <%-
            username = if (u = item.resolver)
              link_to_user(u)
            elsif item.resolver_id.blank?
              SITE_NAME_SHORT
            else
              t(:deleted_user)
            end
          -%>
          <span class="meta"><%= username %> <%= t :said %>,</span>
          "<%= item.comment %>"
        <% end -%>
      </div>
    <% elsif item.is_a? ObservationFieldValue %>
      <div class="stacked body">
        <%= render "observation_fields/observation_field_value", :observation_field_value => item %>
      </div>
    <% elsif item.is_a? ActsAsVotable::Vote %>
      <div class="stacked body">
        <em class="meta nocontent">
          <i class="fa fa-star"></i>
          <%=t :added_to_favorites_html, url: faves_by_login_url(user.login) %>
        </em>
      </div>
    <%- end -%>
    
    <% text = if item.respond_to?(:body) && item.body
        item.body
      elsif item.respond_to?(:description) && item.description
        item.description
      end -%>
    <% unless text.blank? -%>
      <div class="readable body">
        <%- if context_around && context = text.context_of_pattern(context_around) %>
          <%= formatted_user_text(context) %>
        <% else -%>
          <%= formatted_user_text(text) %>
        <% end -%>
      </div>
      <span class="helpful">
        <%-
          votes = item.helpfulness_votes
          user_vote = logged_in? && item.helpfulness_votes.where(voter_id: current_user.id).first
        %>
        <%- if votes.any? && !(votes.length === 1 && user_vote) %>
          <%= I18n.t(:x_people_found_this_helpful, count: item.helpfulness_votes.count ) %>.
        <% end -%>
        <%- if user_vote %>
          You found this helpful.
          <%= button_to "Undo", unvote_path(item.model_name.to_s.downcase, item.id, scope: "helpful",
                format: 'json'), remote: true, method: :delete %>
        <%- elsif logged_in? %>
          Is this helpful for ID'ing?
          <%= button_to "Yes", vote_path(item.model_name.to_s.downcase, item.id, scope: "helpful",
                format: 'json'), remote: true, method: :post %>
        <% end -%>
      </span>
    <% end -%>
    
    <% unless no_meta -%>
      <div class="meta">
        <%=t :posted_by %>
        <%= link_to(truncate(you_or_login(user).downcase, :length => 20), person_path(user)) %>
        <span class="when">
          <abbr class="date timeago" title="<%= posted_at.iso8601 %>">
            <%=t :n_ago, :n => time_ago_in_words(posted_at) %>
          </abbr>
        </span>
        <span class="comment_actions">
          <%-
            pieces = []
            if is_me?(item.user) && edit_url
              pieces << link_to(t(:edit), edit_url)
            end
            if item.is_a?( Identification ) && is_me?( item.user )
              if item.current?
                pieces << link_to( t(:withdraw), item, method: :delete, id: "delete_comment_#{item.id}_button" )
              else
                pieces << link_to( t(:restore), identification_path( item, identification: { current: true } ), method: :put, data: { loading_click: t(:restoring) } )
              end
            elsif item.respond_to?(:deletable_by?) && item.deletable_by?(current_user) || is_me?(item.user)
              pieces << link_to(t(:delete), item,
                          :data => {:confirm => t(:are_you_sure_you_want_to_delete_this)},
                          :method => :delete,
                          :id => "delete_comment_#{item.id}_button")
            end
            if !item.is_a?(Flag) && FlagsController::FLAG_MODELS.include?(item.class.name)
              pieces << link_to(t(:flag), new_flag_path("#{item.class.name.underscore}_id" => item), :class => "flaglink")
            end
          -%>
          (<%= pieces.join(' | ').html_safe %>)
        </span>
      </div>
    <% end -%>
  </div>
</div>
