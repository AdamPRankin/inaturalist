ActivityStreams
===============

ActivityStreams track occurrences of new AR records for an audience of users
for use in update streams or Facebook wall-like features.

Requirements
===========
You'll need to add the activity_streams table:

class CreateActivityStreams < ActiveRecord::Migration
  def self.up
    create_table :activity_streams do |t|
      t.integer :user_id
      t.integer :subscriber_id
      t.references :activity_object, :polymorphic => true
      t.string :body
      t.timestamps
    end
    add_index :activity_streams, [:user_id, :activity_object_type]
    add_index :activity_streams, :subscriber_id
  end

  def self.down
    drop_table :activity_streams
  end
end

On top of that, you'll need to add the model. I know this seems insane, but
apparently a bug in rails when you have plugin-defined models with polymorphic
associations: https://rails.lighthouseapp.com/projects/8994/tickets/1339

class ActivityStream < ActiveRecord::Base
  belongs_to :user
  belongs_to :subscriber, :class_name => 'User', :foreign_key => 'subscriber_id'
  belongs_to :activity_object, :polymorphic => true
  
  def to_s
    "<ActivityStream id: #{id}, user_id: #{user_id}, subscriber_id: #{subscriber_id}, " +
      "activity_object_type: #{activity_object_type}, activity_object_id: #{activity_object_id}"
  end
  
  # Destroys activity streams that have an activity_object that no longer 
  # exists
  def self.destroy_nils_for_activity_object_type(klass)
    as = ActivityStream.all(
      :joins => "LEFT OUTER JOIN #{klass.table_name} ON #{klass.table_name}.id = activity_streams.activity_object_id", 
      :conditions => "#{klass.table_name}.id is null AND activity_object_type = '#{klass.to_s}'")
    as.each(&:destroy)
  end
end


You also need a User model with an association to other users named "followers."
Something like

class User < ActiveRecord::Base
  has_and_belongs_to_many :followers, :class_name => "User"
  has_many :activity_stream_updates, :class_name => 'ActivityStream', :dependent => :destroy
  has_many :activity_streams, :foreign_key => 'subscriber_id'
end


Examples
=======

class Post < ActiveRecord::Base
  belongs_to :user # required!
  acts_as_activity_streamable
end

class Post < ActiveRecord::Base
  belongs_to :user # required!
  acts_as_activity_streamable :batch_window => 30.minutes, :batch_partial => "posts/batch_update"
end


Copyright (c) 2010 iNaturalist.org, released under the MIT license
