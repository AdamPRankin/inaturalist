- content_for :title do
  = @title = t(:editing_this, :elem => @guide.title)
- content_for :extracss do
  = stylesheet_link_tag "guides"
  :css
    input.position {width:1em;}
    .more {display:none;}
    .guide_taxon .check, .guide_taxon .names {padding:4px 6px;}
    .names .display_name {font-size:140%;}
    .grip {margin-bottom:-4px;}
    .bootstrap form.edit_guide_taxon {margin-bottom:0;}
    .bootstrap .ctrl input {margin-bottom:0;}
    #addtaxa input {width:400px;}
    #addtaxa-single .ui-chooser {margin-bottom: 10px;}
    #controls .navbar .btn,
    #controls .navbar .navbar-search,
    #controls .navbar .btn-group {margin-top:0;}
    #controls .navbar .navbar-search input {margin-bottom:0;}
    #controls.affix {top:0px; z-index: 1;}
    #controls.affix .navbar {box-shadow: #777 7px 0 10px; padding:10px 0 10px 0; background-color:white;}
    #controls .pull-left {margin-right:10px;}
    .guide_taxon.warning { background-color: #fcf8e3;}
    .guide_taxon {margin-bottom:0;padding-top:10px;}
    .sorttarget { height: 50px;}
- content_for :extrajs do
  = javascript_include_tag 'jquery/plugins/jquery.labelize'
  :javascript
    var GUIDE = #{raw @guide.to_json}
    $('#addtaxa').modal({
      backdrop: true,
      show: false
    })
    $('#addtaxa').on('shown', function() { $('input:visible', this).focus() })
    $('#addtaxa-place .taxonchooser').chooser({
      collectionUrl: 'http://'+window.location.host + '/taxa/autocomplete.json',
      resourceUrl: 'http://'+window.location.host + '/taxa/{{id}}.json?partial=chooser'
    })
    $('#addtaxa-place .placechooser').chooser({
      collectionUrl: 'http://'+window.location.host + '/places/autocomplete.json',
      resourceUrl: 'http://'+window.location.host + '/places/{{id}}.json?partial=autocomplete_item'
    })
    $('#addtaxa-place .chooser').change(function() {
      $('#addtaxa-place .status').addClass('loading').html('Counting matches...')
      if (window.matchingTaxaRequest) {
        window.matchingTaxaRequest.abort()
      }
      var params = "place_id=" + $('#addtaxa-place .placechooser').val() + 
                    "&taxon_id=" + $('#addtaxa-place .taxonchooser').val()
      window.matchingTaxaRequest = $.getJSON('/taxa.json', params, function(taxa, status, xhr) {
        var c = parseInt(xhr.getResponseHeader('x-total-entries') || 0),
            names = $.map(taxa, function(t) { return t.name }),
            msg = I18n.t('x_matching_taxa_html', {count: c})
        console.log("[DEBUG] msg: ", msg)
        if (names.length == 1) {
          msg += ": " + names.join(', ')
        } else if (names.length > 0){
          msg += ", "+ I18n.t('including') + " " + names.join(', ')
        }
        $('#addtaxa-place .status').removeClass('loading').html(msg)
      })
    })
    window.addTaxonField = function() {
      var newInput = $('<input type="text" name="taxon_id" placeholder="'+I18n.t('start_typing_taxon_name')+'"/>')
      $('#addtaxa-single').append(newInput)
      newInput.chooser({
        collectionUrl: 'http://'+window.location.host + '/taxa/autocomplete.json',
        resourceUrl: 'http://'+window.location.host + '/taxa/{{id}}.json?partial=chooser',
        afterSelect: function(taxon) {
          window.addTaxonField()
        }
      })
      $('#addtaxa-single input:visible:last').focus()
    }
    addTaxonField()
    $('#addtaxa .modal-footer .btn-primary').click(function() {
      if ($('#addtaxa-single:visible').length > 0) {
        addTaxaSingle()
      } else {
        addTaxaFromPlace()
      }
    })
    function addTaxaSingle() {
      $('#addtaxa-single input[name=taxon_id]').each(function() {
        var taxonId = $(this).val()
        if (!parseInt(taxonId) || parseInt(taxonId) <= 0) return
        $.post("/guide_taxa.json", {"guide_taxon[guide_id]": GUIDE.id, "guide_taxon[taxon_id]": taxonId, partial: "guides/guide_taxon_row"})
          .success(function(json, status, xhr) {
            $('#guide_taxa .nocontent').remove()
            $('#guide_taxa').prepend(json.guide_taxon.html)
          })
          .error(function(xhr) {
            var errors = $.parseJSON(xhr.responseText)
            alert(I18n.t('there_were_problems_adding_taxa', {errors: errors}))
          })
      })
      $('#addtaxa-single').html('')
      addTaxonField()
      $('#addtaxa').modal('hide')
    }
    function addTaxaFromPlace() {
      var placeId = $('#addtaxa-place .placechooser').val(),
          taxonId = $('#addtaxa-place .taxonchooser').val()
      $('#addtaxa .modal-footer .btn-primary').addClass('disabled').text('Adding...')
      $.post('/guides/'+GUIDE.id+'/import_taxa', {taxon_id: taxonId, place_id: placeId, partial: "guides/guide_taxon_row"}, function(json) {
        $.each(json.guide_taxa, function(gt) {
          if (this.html) {
            $('#guide_taxa .nocontent').remove()
            $('#guide_taxa').prepend(this.html)
          }
        })
      }, 'json').complete(function() {
        $('#addtaxa .modal-footer .btn-primary').removeClass('disabled').text('Add taxa')
        $('#addtaxa').modal('hide')
      })
    }
    $('.guide_taxon .delete').bind('ajax:before', function() {
      $(this).parents('.guide_taxon').slideUp()
    }).bind('ajax:success', function() {
      $(this).parents('.guide_taxon').remove()
    })
    $('.guide_taxon').labelize();
    $('.check input').change(function() {
      if (this.checked) {
        $(this).parents('.guide_taxon:first').addClass('warning')
        $('#editbutton').removeClass('disabled')
      } else {
        $(this).parents('.guide_taxon:first').removeClass('warning')
        if ($('.guide_taxon.warning').length == 0) {
          $('#editbutton').addClass('disabled')
        }
      }
    })
    function incrementLoadingStatus(options) {
      options = options || {}
      var status = $('.bigloading.status').text(),
          matches = status.match(/ (\d+) of (\d+)/),
          current = parseInt(matches[1]),
          total = matches[2],
          verb = options.verb || I18n.t('saving_verb')
      $('.bigloading.status').text(I18n.t('verbing_x_of_y', {verb: verb, x: current + 1, y: total}))
    }
    function deleteGuideTaxon(options) {
      var options = options || {}
      var container = $('#guide_taxa'),
          recordContainer = $(this).parents('form:first'),
          params = '',
          recordId = $(this).data('guide-taxon-id') || $(this).attr('href').match(/\d+$/)[0]
      var nextMethod = function() {
        if (options.chain) {
          var link = recordContainer.nextAll().has('input[type=checkbox]:checked').find('.delete').get(0)
          if (link) {
            incrementLoadingStatus({verb: I18n.t('deleting_verb')})
            deleteGuideTaxon.apply(link, [options])
          } else {
            container.shades('close')
          }
        }
      }
      if (recordId && recordId != '') {
        params += '&_method=DELETE'
        url = '/guide_taxa/'+recordId
      } else {
        recordContainer.hide()
        nextMethod()
        recordContainer.remove()
        return
      }
      $.post(url, params, function(data, status) {
        recordContainer.slideUp(function() {
          nextMethod()
          recordContainer.remove()
        })
      }, 'json').error(function(xhr) {
        var json = eval('(' + xhr.responseText + ')')
        recordContainer.removeClass('success')
        recordContainer.addClass('error')
        if (json.full_messages) {
          errors = json.full_messages
        } else {
          var errors = ""
          for (var key in json.errors) {
            errors += key.replace(/_/, ' ') + ' ' + json.errors[key]
          }
        }
        recordContainer.find('.message td').html(errors)
        recordContainer.effect('highlight', {color: 'lightpink'}, 1000)
        nextMethod()
      })
    }
    function removeSelected() {
      $selection = $('.guide_taxon').has('input[type=checkbox]:checked')
      if ($selection.length == 0) return false
      if (confirm(I18n.t('are_you_sure_you_want_to_remove_these_x_taxa?', {x: $selection.length}))) {
        var msg = I18n.t('verbing_x_of_y', {verb: I18n.t('deleting_verb'), x: 1, y: $selection.length})
        $('#guide_taxa').loadingShades(msg, {cssClass: 'bigloading'})
        var link = $selection.find('.delete:first').get(0)
        deleteGuideTaxon.apply(link, [{chain: true}])
      }
    }
    $('.navbar-search input').keyup(function(e) {
      var q = $(this).val()
      if (!q || q == '') {
        $('.guide_taxon').show()
        return
      }
      $('.guide_taxon').each(function() {
        if ($(this).data('search-name').match(q)) {
          $(this).show()
        } else {
          $(this).hide()
        }
      })
    })
    $('#selectall').click(function() {
      $('.guide_taxon input:checkbox:visible').attr('checked', true).change()
    })
    $('#selectnone').click(function() {
      $('.guide_taxon input:checkbox').attr('checked', false).change()
    })
    function updatePositions(container, sortable) {
      $selection = $(sortable+':visible', container)
      $selection.each(function() {
        $('input[name*="position"]', this).val($selection.index(this) + 1)
      })
    }
    $('#guide_taxa').sortable({
      items: "> form",
      cursor: "move",
      placeholder: 'row-fluid stacked sorttarget',
      update: function(event, ui) {
        updatePositions("#guide_taxa", "form")  
        if (!window.updateGuideTaxaTimeout) {
          window.updateGuideTaxaTimeout = setTimeout('updateGuideTaxa()', 5000)
        };
      }
    })
    function updateGuideTaxa() {
      window.updateGuideTaxaTimeout = null
      saveGuideTaxon.apply($('#guide_taxa form:first').get(0), [{chain: true}])
    }
    function saveGuideTaxon(options) {
      var options = options || {}
      var container = $('#guide_taxa'),
          recordContainer = $(this)
      var nextMethod = function() {
        if (options.chain) {
          var next = recordContainer.nextAll('form').get(0)
          if (next) {
            saveGuideTaxon.apply(next, [options])
          } else {
            container.shades('close')
          }
        }
      }
      var url = $(this).attr('action'),
          params = $(this).serialize()
      $.post(url, params, function(data, status) {
        nextMethod()
      }, 'json').error(function(xhr) {
        var json = eval('(' + xhr.responseText + ')')
        nextMethod()
      })
    }
.container-fluid
  %ul.breadcrumb
    %li
      = link_to t(:back_to_x, :noun => @guide.title), @guide, :class => "back"

  %h1= @title

  .row-fluid
    .span3
      = form_for @guide do |f|
        = f.text_field :title, :placeholder => t(:title), :class => "span12"
        = f.text_area :description, :placeholder => t(:description), :class => "span12"

        .field.stacked
          %label=t :icon
          - if @guide.icon.file?
            = image_tag(@guide.icon.url(:thumb), :class => "left")
            %div
              = check_box_tag :icon_delete
              %label{:for => "icon_delete", :style => "display:inline"}=t :delete_icon?
            = link_to_toggle t(:change_icon), "#iconfield"
            #iconfield{:style => "display: none"}
              = f.file_field :icon, :label => false, :accept => "image/jpg,image/jpeg,image/png,image/gif"
          - else
            = f.file_field :icon, :label => false, :size => 20, :accept => "image/jpg,image/jpeg,image/png,image/gif"

        = f.label :license, t(:license)
        = f.select :license, Observation::LICENSE_CODES, :include_blank => "No license (all rights reserved)", :class => "span12"
        .stacked
          %a{:type => "button", :role => "button", "data-toggle" => "modal", "data-target" => "#licensing"}=t :about_licensing
        / %h3 Navigation
        / - for opt in @nav_options
        /   = check_box_tag opt
        .actions
          = f.submit t(:save_guide), :class => "btn btn-primary"
          = link_to t(:delete), @guide, :method => :delete, :confirm => t(:are_you_sure?), :class => "btn btn-danger pull-right"

    .span9
      #controls.clearfix.row-fluid{"data-spy" => "affix", "data-offset-top" => 148}
        .navbar.clearfix
          .pull-left
            .btn-group
              %button#editbutton.disabled.btn.warning.dropdown-toggle{"data-toggle" => "dropdown"}
                =t :edit
                %span.caret
              %ul.dropdown-menu
                %li= link_to_function t(:remove_selected), "removeSelected()"
            %button#selectall.btn{:type => "button", :role => "button"}=t :select_all
            %button#selectnone.btn{:type => "button", :role => "button"}=t :select_none
            %button.btn-primary.btn{:type => "button", :role => "button", "data-toggle" => "modal", "data-target" => "#addtaxa"}=t :add_taxa
          %form.navbar-search
            %input{:type => "text", :placeholder => t(:search), :name => "q", :value => @q}
      #guide_taxa
        - if @guide_taxa.blank?
          .nocontent.alert
            %p=t :looks_like_no_species_in_guide
            %button.btn-primary.btn{:type => "button", :role => "button", "data-toggle" => "modal", "data-target" => "#addtaxa"}=t :add_some_now
        - else
          - for guide_taxon in @guide_taxa
            = render "guide_taxon_row", :guide_taxon => guide_taxon

#addtaxa.modal.fade.hide{:role => "dialog", "aria-labelledby" => "myModalLabel", "aria-hidden" => "true"}
  .modal-header
    %button.close{:type => "button", "data-dismiss" => "modal"} x
    %h3=t :add_taxa
  .modal-body
    %ul.nav.nav-pills
      %li.active= link_to t(:one_by_one), "#addtaxa-single", "data-toggle" => "pill"
      %li= link_to t(:from_place), "#addtaxa-place", "data-toggle" => "pill"
    .tab-content
      #addtaxa-single.tab-pane.active.fade.in
      #addtaxa-place.tab-pane.fade
        .stacked
          %input.placechooser.chooser{:placeholder => t(:start_typing_place_name)}
        .stacked
          %input.taxonchooser.chooser{:placeholder => t(:start_typing_taxon_name)}
          %span.muted
            = surround '(', ')' do
              =t :optional
        .stacked.status.muted=t :x_matching_taxa, :count => 0
        .muted=t 'views.guides.edit.places_note'
  .modal-footer
    %button.btn{"data-dismiss" => "modal"}=t :close
    %button.btn.btn-primary=t :add_taxa

#licensing.modal.fade.hide{:role => "dialog", "aria-labelledby" => "myModalLabel", "aria-hidden" => "true"}
  .modal-header
    %button.close{:type => "button", "data-dismiss" => "modal"} x
    %h3=t :about_licenses
  .modal-body
    %p=t 'views.guides.edit.licensing_explanation'
    - for row in Observation::LICENSES.in_groups_of(2)
      .row-fluid
        - for code, name, description in row
          .row6
            %h4
              = image_tag("#{code}.png")
              = t(name)
            .stacked.description
              %p
                = t(description)
                = link_to t(:view_license), url_for_license(code), :class => "readmore", :target => "_blank"
