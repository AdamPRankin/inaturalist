var inatTaxonMap = { };

(function($) {
  $.fn.taxonMap = function( options ) {
    options = options || { }
    $(this).each( function( ) {
      if ( options == 'fit' ) {
        inatTaxonMap.fit( this );
      } else {
        inatTaxonMap.setup( this, options );
      }
    });
  }
}(jQuery))

inatTaxonMap.setup = function ( elt, options ) {
  var options = $.extend( { }, options );
  if (options.taxon) {
    options.taxonID = options.taxon.id;
  } else {
    options.taxonID = options.taxonID || $(elt).data('taxon-id');
  }
  if (!options.taxonID) { return; }
  options.latitude = options.latitude || $(elt).data('latitude');
  options.longitude = options.longitude || $(elt).data('longitude');
  options.mapType = options.mapType || $(elt).data('map-type');
  options.zoomLevel = parseInt( options.zoomLevel || $(elt).data('zoom-level') );
  options.gbifKmlUrl = options.gbifKmlUrl || $(elt).data('gbif-kml');
  options.rangeTaxonID = options.rangeTaxonID || $(elt).data('range-taxon-id');
  options.placeGeomID = options.placeGeomID || $(elt).data('place-geom-id');
  if (options.gbifKmlUrl == '') {
    options.gbifKmlUrl = null;
  }
  if (options.zoomLevel == 0) {
    options.zoomLevel = null;
  }

  options.bbox = options.bbox || $(elt).data('bbox')
  if (typeof(options.bbox) == 'string') {
    options.bbox = $.map(options.bbox.split(','), Number)
  }
  $(elt).data('taxonMapOptions', options)
  inatTaxonMap.setupGoogle(elt)
};

inatTaxonMap.fit = function( elt ) {
  inatTaxonMap.fitGoogle( elt );
};

inatTaxonMap.setupGoogle = function( elt ) {
  var options = $(elt).data('taxonMapOptions'),
      map = iNaturalist.Map.createMap({div: elt}),
      preserveViewport = options.preserveViewport
  if (options.bbox) {
    map.fitBounds(
      new google.maps.LatLngBounds(
        new google.maps.LatLng(options.bbox[0], options.bbox[1]),
        new google.maps.LatLng(options.bbox[2], options.bbox[3])
      )
    )
    preserveViewport = true
  } else if (options.latitude || options.longitude) {
    map.setCenter(new google.maps.LatLng(options.latitude || 0, options.longitude || 0))
    if (options.zoomLevel) {
      map.setZoom(options.zoomLevel)
    }
  }

  if (options.mapType) {
    map.setMapTypeId(options.mapType)
  }

  if (options.gbifKmlUrl) {
    var gbifLyr = new google.maps.KmlLayer(options.gbifKmlUrl, {suppressInfoWindows: true, preserveViewport: true})
    map.addOverlay(I18n.t('taxon_map.gbif_occurrences'), gbifLyr, {
      id: 'gbif-'+options.taxonID,
      hidden: true,
      description:
        I18n.t('taxon_map.it_may_take_google_a_while_to') +
        ' <a target="_blank" href="'+options.gbifKmlUrl.replace(/&format=kml/, '')+'">' + I18n.t('taxon_map.data_url') + '</a>'
    })
    google.maps.event.addListener(gbifLyr, 'click', function(e) {
      if (!window['kmlInfoWindows']) window['kmlInfoWindows'] = {}
      for (var k in window['kmlInfoWindows']) {
        window['kmlInfoWindows'][k].close()
      }
      var win = window['kmlInfoWindows'][e.featureData.id]
      if (!win) {
        // filter out google's insane parsing
        var content = (e.featureData.description || '').replace(/(<a.+?>)<a.+?>(.+?)<\/a><\/a>/g, "$1$2</a>")
        content = content.replace(/&lt;\/a/g, '')
        content = content.replace(/&gt;/g, '')
        content = content.replace(/<\/a"/g, '"')
        win = window['kmlInfoWindows'][e.featureData.id] = new google.maps.InfoWindow({
          content: content,
          position: e.latLng,
          pixelOffset: e.pixelOffset
        })
      }
      win.open(map)
      return false
    })
    preserveViewport = true
  }

  if (options.rangeTaxonID) {
    map.addTaxonRangeLayer({ taxon_id: options.rangeTaxonID });
  }

  if (options.placeGeomID) {
    map.addPlaceLayer({ place_id: options.placeGeomID });
  }

  if (options.taxonID) {
    gridOptions = { taxon_id: options.taxonID };
    map.addObservationsLayer(gridOptions);
  }

  if (!preserveViewport) {
    inatTaxonMap.fit(elt)
  }

  $(elt).data('taxonMap', map)
};

inatTaxonMap.fitGoogle = function( elt ) {
  var options = $(elt).data('taxonMapOptions'),
      map = $(elt).data('taxonMap'),
      preserveViewport = false
  if (!map) {return};
  if (options.bbox) {
    map.fitBounds(
      new google.maps.LatLngBounds(
        new google.maps.LatLng(options.bbox[0], options.bbox[1]),
        new google.maps.LatLng(options.bbox[2], options.bbox[3])
      )
    )
    return
  } else if (options.latitude || options.longitude) {
    map.setCenter(new google.maps.LatLng(options.latitutde || 0, options.longitude || 0))
    map.setZoom(4)
    return
  }

  if (map.observationBounds) {
    map.zoomToObservations()
    return
  }

  map.setCenter(new google.maps.LatLng(0, 0))
  map.setZoom(1)
};
