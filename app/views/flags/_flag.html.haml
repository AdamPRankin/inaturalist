- flaggable = flag.flaggable
- flaggable_class = flaggable.class
- flaggable = flaggable.becomes( Photo ) if flaggable.is_a?( Photo )
%div{ class: "flag #{"resolved" if flag.resolved?}" }
  - if flag.user
    = link_to flag.user.login, flag.user
  - else
    = @site.site_name_short
  = link_to t(:flagged), flag, action: "show"
  - if flaggable.respond_to?(:user) && flaggable.user
    = link_to "#{flaggable.user.login}'s", :controller => "users", :action => "show", :id => flaggable.user.id
  - else
    = t(:the)
  = flaggable_class.name.humanize.downcase
  = link_to( flaggable.to_plain_s, flaggable ) if flaggable.respond_to?(:to_plain_s)
  = t :because
  = "\"#{flag.flag}\""
  %span.small.meta.ui
    = link_to flag do
      %span.count= flag.comments.size
      = t(:comments).downcase
    &middot;
    = link_to t(:details), flag
    - if is_curator?
      &middot;
      %strong= link_to t(:resolve), flag
    - if is_me?(flag.user) || is_curator?
      &middot;
      = link_to t(:delete), flag, data: { confirm: t(:you_sure_delete_flag?) }, method: :delete
- if flag.resolved? && !flag.comment.blank?
  .resolution.description
    %strong
      = succeed ":" do
        - if flag.resolver
          = t :resolved_by
          = link_to flag.resolver.login, flag.resolver
        - else
          = t :resolved
    = surround "\"", "\"" do
      = formatted_user_text( flag.comment, skip_simple_format: true )
