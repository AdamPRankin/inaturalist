- content_for :extracss do
  = stylesheet_link_tag "users/registrations"
- content_for(:extrajs) do
  %script{ src: "https://www.google.com/recaptcha/api.js?hl=#{I18n.locale}" }
  :javascript
    var RecaptchaCallback = function( response ) {
      $( "#signup_form .button[type='submit']" ).prop( "disabled", false );
    };

    $(document).ready(function() {
      $( ".time_zone_select" ).selectLocalTimeZone( );
      $( "html" ).click( function( e ) {
        $( '[data-toggle="popover"]' ).popover( "hide" );
      } );
      $( '[data-toggle="popover"]' ).popover( {
        html: true,
        trigger: "manual"
      } ).click( function( e ) { 
        $(this).popover( "toggle" );
        e.stopPropagation( );
      } );
      $( "#license-all" ).click( function( ) {
        $( "#license-fields input[type=checkbox]" ).click( );
      } );
    } );

.flexrow
  - obs = @observations[rand(@observations.size)]
  #imgcol.hidden-xs.hidden-sm{ style: "background-image: url('#{obs.photos[0].large_url}');" }
    .about-observation
      = link_to_user obs.user, style: "background-image: url('#{obs.user.icon.url(:medium)}');", class: "usericon" do
        &nbsp;
      .details
        %div
          =t :photo_by
        = link_to obs, class: "username" do
          = obs.user.published_name
        %div=t :from_place_x, place: obs.place_guess

  #formcol
    = form_for @user, url: users_path, html: { id: "signup_form" } do |f|
      %h1=t :join_the_largest_group_of_naturalists_in_the_world
      .form-group.text-field.email
        = f.text_field :email, autocorrect: "off", autocapitalize: "off", placeholder: t( :email ), type: "email", class: "form-control"
        - unless @user.errors[:email].blank?
          .error= formatted_error_sentence_for( @user, :email )
      .form-group.text-field.username
        = f.text_field :login, autocorrect: "off", autocapitalize: "off", placeholder: t( :username ), class: "form-control"
        - unless @user.errors[:login].blank?
          .error= formatted_error_sentence_for( @user, :login )
      .form-group.text-field.password
        = f.password_field :password, class: "text", placeholder: t(:password), class: "form-control"
        - unless @user.errors[:password].blank?
          .error= formatted_error_sentence_for( @user, :password )
      .form-group.text-field.password-confirmation
        = f.password_field :password_confirmation, class: "text", placeholder: t(:password_confirmation), class: "form-control"
        - unless @user.errors[:password_confirmation].blank?
          .error= formatted_error_sentence_for( @user, :password_confirmation )
      - if false #@site.using_recaptcha?
        .form-group.recaptcha
          .g-recaptcha{ data: { sitekey: @site.google_recaptcha_key, callback: "RecaptchaCallback" }, style: "text-align: center" }
          - if @user.errors && !@user.errors[:recaptcha].blank?
            .error= @user.errors[:recaptcha].to_sentence
      #licensing.form-group
        %label
          %input#license-all{ type: "checkbox", checked: true }
          #license-fields.hidden
            = f.check_box :preferred_observation_license, { checked: true }, Observation::CC_BY_NC
            = f.check_box :preferred_photo_license, { checked: true }, Observation::CC_BY_NC
            = f.check_box :preferred_sound_license, { checked: true }, Observation::CC_BY_NC
          %span
            =t :yes_license_my_observations_so_scientists_can_use
            %a{ href: "#", data: { toggle: "popover", content: t(:check_this_box_if_html), placement: "top" }, title: t(:about_licenses) }
              =t :learn_more
      .form-group.centered
        = f.submit t(:create_an_account), class: "btn btn-inat btn-primary btn-lg"
      .form-group.centered
        = link_to t(:already_have_an_account_log_in_html), login_path, class: "btn btn-link"
      .form-group.centered.bigtext
        =t :or_all_caps
      .form-group.centered.provider-authorizations
        - ProviderAuthorization::AUTH_URLS.select{|p,u| %{google_oauth2 facebook}.include?( p ) }.each do |provider, url|
          - provider_name = ProviderAuthorization::PROVIDER_NAMES[provider].downcase
          .stacked
            = link_to url, class: "btn btn-primary btn-lg providerlink #{provider_name}" do
              %i.fa{ class: "fa-#{}"}
              = t(:sign_in_with_provider, :provider => ProviderAuthorization::PROVIDER_NAMES[provider])
            

