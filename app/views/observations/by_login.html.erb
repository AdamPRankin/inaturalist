<% content_for(:title)  do %>
Observations by <%= h @login %>
<% end %>

<% content_for(:extracss) do %>
<%= stylesheet_link_tag 'observations', 'observations/by_login', 'observations/filters' %>
<style type="text/css" media="screen">
  .observations.table .header.user,
  .observations.table .observation .attribute.user {
    display: none;
  }
  
  .observations.infowindow .observation {
    width: 220px;
  }
  
  #edit_selected_button {
    background-color: #FFC;
  }
  
  #delete_selected_button {
    color: DeepPink;
  }
  
  .buttonrow .status.loading {
    display: block;
    float: left;
    width: auto;
    padding: 6px 0;
    margin: 0pt 0.583em 0.667em 0pt;
  }
  
  #filters_button {
    padding-left: 17px;
    padding-right: 10px;
    background: 7px 10px url('/images/toggle_arrow_right.png') no-repeat;
    border: 1px solid transparent;
    background-color: white;
    outline: none;
  }

  #filters_button.open {
    background: 5px 12px url('/images/toggle_arrow_down.png') no-repeat;
    border: 1px solid #eee;
    border-bottom: 1px solid white;
    padding-bottom: 17px;
    margin-bottom: -1px;
  }
</style>
<!--[if lte IE 7]>
  <%= stylesheet_link_tag 'blueprint/ie', 'observations-ie' %>
<![endif]-->
<% end %>

<% content_for(:extrajs) do %>
<%= gmap_include_tag %>
<%= javascript_include_tag 'inaturalist',
                           'inaturalist/map2',
                           "observations/filters",
                           'jquery/plugins/jquery.labelize',
                           'jquery/plugins/inat/checkboxes' %>

 <script type="text/javascript" charset="utf-8">
    // define a function to be run after the window is fully loaded
    function initialize() {
      // create a Google Map instance
      var map = window.map = iNaturalist.Map.createMap({lat: 40.714, lng: -98.262, zoom: 3});
    
      // Create a basic icon and a 'new' icon
      // Note the convient color syntax
      var obsIcon = iNaturalist.Map.createObservationIcon({color: "HotPink"});
      var newObsIcon = iNaturalist.Map.createObservationIcon({color: "DeepPink"});
    
      var observations = <%= @observations.to_json(:include => { :user => { :only => :login }, :taxon => {}, :iconic_taxon => {} }) %>;
      
      var letter_counter = 0;
      var letters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
      $.each(observations, function(o) {
        var o = this;
         if (typeof(o.latitude) != 'undefined' && typeof(o.longitude) != 'undefined') {
           map.addObservation(o, {
             icon: iNaturalist.Map.createObservationIcon({
               color: "HotPink",
               character: letters[letter_counter]
             })
           });
           letter_counter++;
         }
       });
      
      // zoom the map to the extent of the observations
      var bounds = new GLatLngBounds();
      $.each(observations, function(o) {
        var o = this;
        if (typeof(o.latitude) != 'undefined' && typeof(o.longitude) != 'undefined') {
          marker = new GMarker(new GLatLng(o.latitude, o.longitude))
          bounds.extend(new GLatLng(o.latitude, o.longitude));
        }
      });
      map.setZoom(map.getBoundsZoomLevel(bounds));
      map.setCenter(bounds.getCenter());
      
      // create infowindows and behaviors
      $.each(observations, function(observation) {
        var observation = this;
        var icon_div = $('#observation-'+observation.id+' .icon').get(0);
        if (typeof(map.observations[observation.id]) != 'undefined') {
          var marker = map.observations[observation.id];
          
          // add the marker image to the list
          var icon_img = $('<img/>').attr('src', marker.getIcon().image).addClass('marker');
    
          // bind the observation's marker as the context to operate in when
          // the obsNode is clicked in the list.
          $(icon_img).click(function() {
            map.openInfoWindow.apply(marker)
          });
        }
        else {
          var icon_img = $('<img src="/images/mapMarkers/questionmarker.png"/>');
        }
        $(icon_div).text('').append(icon_img);
      });
      
      // Reveal columns
      $('.created_at').show();
    }
    
    $(document).ready(initialize);
    $(window).unload(GUnload);
    
    function batchEdit() {
      $('.observation .icon').toggle();
      $('#batch_edit_button').toggle();
      if ($('#batchcontrols').is(":visible")) {
        $('#batchcontrols').hide();
      } else {
        $('#batchcontrols').show();
      }
      if ($('.observation .attribute.control').length > 0) {
        $('.observation .attribute.control').toggle();
      } else {
        buildBatchEditControls();
        $('.observation').labelize();
      };
      
      // Uncheck all if hidden
      if ($('.observation .attribute.control:visible').length == 0) {
        $('.observation .attribute.control input:checkbox').uncheck();
      };
    }
    
    function buildBatchEditControls() {
      $('.observation').prepend(
        $('<div class="control attribute">').append(
          $('<input type="checkbox"/>')
        ).css({
          'text-align': 'center',
          'vertical-align': 'middle',
          'background-color': '#ffc',
          'position': 'relative'
        })
      );
      $('.observation').each(function() {
        var obs_id = $(this).attr('id').split('-').pop();
        $(this).find('.control input:checkbox').val(obs_id);
      });
    }
    
    function editSelected() {
      actOnSelected("<%= url_for(:action => 'edit_batch') %>");
    }
    
    function actOnSelected(baseURL) {
      var obs_inputs = $.makeArray($('.observation .control input:checkbox:checked'));
      var obs_ids = $.map(obs_inputs, function(input) { return $(input).val(); });
      if (obs_ids.length > 0) {
        window.location = baseURL + "?o=" + obs_ids.join(',');
      } else {
        alert('You need to select some observations first.');
      }
    }
    
    function deleteSelected() {
      var obs_inputs = $.makeArray($('.observation .control input:checkbox:checked'));
      var obs_ids = $.map(obs_inputs, function(input) { return $(input).val(); });
      if (obs_ids.length > 0) {
        iNaturalist.restfulDelete("<%= url_for(:action => 'delete_batch') %>", {
          plural: true,
          data: {
            authenticity_token: encodeURIComponent(<%= form_authenticity_token.inspect %>),
            o: obs_ids.join(',')
          }, 
          complete: function() {
            $.each(obs_inputs, function() {
              $(this).parents('.observation').fadeOut('normal', function() {
                $(this).remove()
              });
            });
            
            $('#delete_selected_button').show();
            $('#delete_selected_button').next('.loading.status').remove();
          }
        }, $('#delete_selected_button'));
      } else {
        alert('You need to select some observations first.');
      }
    }
 </script>
 
 <!--[if lt IE 8]>
 <script src="http://ie7-js.googlecode.com/svn/trunk/lib/IE8.js" type="text/javascript"></script>
 <![endif]-->
<% end %>

<% content_for(:extrahead) do %>
<link rel="alternate" type="application/atom+xml" title="Recent Observations by <%= h @login %> (Atom)" href="<%= url_for({:controller => 'observations', :action => 'by_login', :login => @login, :format => 'atom'}) %>" />
<% end %>

<div id="pageheader" class="column span-24">
  <%= link_to(
    image_tag(@selected_user.icon.url(:thumb), :class => 'usericon'),
    person_by_login_path(@selected_user.login)) %>
  
  <h2>
    <% if @user and @user.login == @login %>
      Your
    <% else %>
      <%= @login %>'s
    <% end %>
    Observations
  </h2>
  <%= render :partial => 'users/subnav', 
             :locals => { :user => @selected_user } %>
  
  <div id="tools" class="buttonrow">
    <% if @user && @user.login == @login -%>
      <%= link_to "Add Observations", new_observation_path, 
                  :id => "newobsbutton", :class => "default button"%>
      <%= link_to_function("Batch Edit", "batchEdit()", :id => "batch_edit_button", :class => 'button') %>
      <div id="batchcontrols" style="display: none">
        <%= link_to_function("Stop Editing", "batchEdit()", :id => "stop_batch_edit_button", :class => 'button') %>
        <%= link_to_function("Edit Selected", "editSelected()", :id => "edit_selected_button", :class => 'button') %>
        <%= link_to_function("Select all", "$('.observation .control input:checkbox').check()", :id => "select_all_button", :class => 'minor button') %>
        <%= link_to_function("Select none", "$('.observation .control input:checkbox').uncheck()", :id => "select_none_button", :class => 'minor button') %>
        <%= link_to_function("Delete Selected", "deleteSelected()", :id => "delete_selected_button", :class => 'minor button') %>
      </div>
    <% end -%>
    <%= link_to_function("Search", 
      "$('#filters').toggle(); $(this).toggleClass('open'); $('#filters:visible input[name=filters_open]').val(true); $('#filters:hidden input[name=filters_open]').val(false);", 
      :id => 'filters_button', 
      :class => "inter#{' open' if @filters_open}") %>
  </div>
  <div id="filters" class="clear"<% unless @filters_open %> style="display: none"<% end %>>
    <% form_tag observations_by_login_path(@login), :method => :get do -%>
      <%= render :partial => 'filter_fields', :locals => {
        :selected_taxa => @iconic_taxa
      } %>
    <% end -%>
  </div>
</div>

<div id="listcol" class="column span-16">
  <div class="observations table">
    <%= render :partial => 'observations_table_header' %>
    <%= render(:partial => 'cached_component', 
               :collection => @observations) %>
  </div><!-- end observations table -->
  <% if @observations.empty? %>
    <div id="no_obs_message" class="description">
      No matching observations.
      <% if @user and @user.login == @login %>
      <%= link_to 'Add Observations', new_observation_path, 
                  :class => 'default inline button' %>
      <% end %>
    </div>
  <% end %>
  <div id="pagination">
    <% if logged_in? -%>
      <% form_for @prefs, :url => url_for, :html => {:style => "float: left"} do |f| %>
        <%= f.label :per_page %>
        <%= f.select :per_page, ApplicationController::PER_PAGES, 
          {:selected => @prefs.per_page.to_i}, :onchange => "$(this).parents('form:first').submit()" %>
      <% end %>
    <% end -%>
    
    <%= will_paginate @observations %>
  </div>
</div>

<div id="mapcol" class="column span-8 last">
  <div id="map"></div>
</div>

<div class="last column span-24">
  <div id="feeds" class="small ui description feeds">
    Feeds For Current Filters:
    <%- 
      feed_params = params.reject do |key,value|
        ObservationsController::REJECTED_FEED_PARAMS.include?(key)
      end
      kml_feed_params = params.reject do |key,value|
        ObservationsController::REJECTED_KML_FEED_PARAMS.include?(key)
      end
    -%>
    <%= link_to("Atom", observations_by_login_feed_path(@login, :format=>'atom', :params => feed_params), :id => 'atomlink') %>
    <%= link_to("KML",  observations_by_login_feed_path(@login, :format=>'kml', :params => kml_feed_params), :id => 'kmllink') %>
    <%= link_to("CSV",  observations_by_login_feed_path(@login, :format=>'csv', :params => feed_params), :id => 'csvlink') %>
  </div>
</div>
