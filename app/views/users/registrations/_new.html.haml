- def is_sign_up?; controller.is_a?( Devise::RegistrationsController ); end
- content_for :extracss do
  = stylesheet_link_tag "users/registrations"
- content_for(:extrajs) do
  = javascript_include_tag "moment/min/moment-with-locales.min"
  = javascript_include_tag "moment-timezone/builds/moment-timezone-with-data-2010-2020.min"
  - if is_sign_up?
    %script{ src: "https://www.google.com/recaptcha/api.js?hl=#{I18n.locale}" }
    :javascript
      var RecaptchaCallback = function( response ) {
        $( "#signup_form .button[type='submit']" ).prop( "disabled", false );
      };
      $(document).ready(function() {
        var userZone = moment.tz.guess( );
        if ( userZone ) {
          console.log( "[DEBUG] userZone: ", userZone );
          var option = $( ".time_zone_select option[data-tz-name='"+userZone+"']" );
          console.log( "[DEBUG] option: ", option );
          console.log( "[DEBUG] option.attr( value ): ", option.attr( "value" ) )
          $( ".time_zone_select" ).val( option.attr( "value" ) );
        }
        $( ".time_zone_select" ).selectLocalTimeZone( );
        $( "html" ).click( function( e ) {
          $( '[data-toggle="popover"]' ).popover( "hide" );
        } );
        $( '[data-toggle="popover"]' ).popover( {
          html: true,
          trigger: "manual"
        } ).click( function( e ) { 
          $(this).popover( "toggle" );
          e.stopPropagation( );
        } );
        $( "#license-all" ).click( function( ) {
          $( "#license-fields input[type=checkbox]" ).click( );
        } );
      } );

.flexrow
  - obs = @observations[rand(@observations.size)]
  #imgcol.hidden-xs.hidden-sm{ style: "background-image: url('#{obs.photos[0].large_url}');" }
    .about-observation
      = link_to_user obs.user, style: "background-image: url('#{obs.user.icon.url(:medium)}');", class: "usericon" do
        &nbsp;
      .details
        %div
          =t :photo_by
        = link_to obs, class: "username" do
          = obs.user.published_name
        %div=t :from_place_x, place: obs.place_guess

  #formcol{ class: is_sign_up? ? "sign-up" : "log-in" }
    = form_for resource, url: is_sign_up? ? users_path : session_path, html: { novalidate: !is_sign_up? } do |f|
      %h1
        - if is_sign_up?
          =t :join_the_largest_group_of_naturalists_in_the_world
        - else
          =t :welcome_back!
      .form-group.text-field.email
        = f.text_field :email, autocorrect: "off", autocapitalize: "off", required: true, placeholder: is_sign_up? ? t( :email ) : t( :username_or_email ), type: "email", class: "form-control"
        - unless resource.errors[:email].blank?
          .error= formatted_error_sentence_for( resource, :email )
      - if is_sign_up?
        .form-group.text-field.username
          = f.text_field :login, autocorrect: "off", autocapitalize: "off", required: true, placeholder: t( :username ), class: "form-control"
          - unless resource.errors[:login].blank?
            .error= formatted_error_sentence_for( resource, :login )
      .form-group.text-field.password
        = f.password_field :password, class: "text", required: true, placeholder: t(:password), class: "form-control"
        - unless resource.errors[:password].blank?
          .error= formatted_error_sentence_for( resource, :password )
      - if is_sign_up?
        .form-group.text-field.password-confirmation
          = f.password_field :password_confirmation, class: "text", required: true, placeholder: t(:password_confirmation), class: "form-control"
          - unless resource.errors[:password_confirmation].blank?
            .error= formatted_error_sentence_for( resource, :password_confirmation )
        - if @site.using_recaptcha?
          .form-group.recaptcha
            .g-recaptcha{ data: { sitekey: @site.google_recaptcha_key, callback: "RecaptchaCallback" }, style: "text-align: center" }
            - if resource.errors && !resource.errors[:recaptcha].blank?
              .error= resource.errors[:recaptcha].to_sentence
        #licensing.form-group.checkbox
          %label
            %input#license-all{ type: "checkbox", checked: true }
            #license-fields.hidden
              = f.check_box :preferred_observation_license, { checked: true }, Observation::CC_BY_NC
              = f.check_box :preferred_photo_license, { checked: true }, Observation::CC_BY_NC
              = f.check_box :preferred_sound_license, { checked: true }, Observation::CC_BY_NC
            %span
              =t :yes_license_my_observations_so_scientists_can_use
              %a{ href: "#", data: { toggle: "popover", content: t(:check_this_box_if_html), placement: "top" }, title: t(:about_licenses) }
                =t :learn_more
        .form-group.hidden
          = f.select :time_zone, ActiveSupport::TimeZone.all.sort.map{|tz| [tz.to_s, tz.name, { "data-tz-name": tz.tzinfo.name } ]}, { include_blank: true }, { class: "time_zone_select" }
      - elsif devise_mapping.rememberable?
        .form-group.checkbox
          %label
            = f.check_box :remember_me
            = t(:remember_me)
      .form-group.centered
        - if is_sign_up?
          = f.submit t(:create_an_account), class: "btn btn-inat btn-primary btn-lg"
        - else
          = f.submit t(:log_in), class: "btn btn-inat btn-primary btn-lg"
      .form-group.centered
        - if is_sign_up?
          = link_to t(:already_have_an_account_log_in_html), login_path, class: "btn btn-link"
        - else
          = link_to t(:dont_have_an_account_sign_up_html), signup_path, class: "btn btn-link"
      .form-group.centered.bigtext
        =t :or_all_caps
      .form-group.centered.provider-authorizations
        - ProviderAuthorization::AUTH_URLS.select{|p,u| %{google_oauth2 facebook}.include?( p ) }.each do |provider, url|
          - provider_name = ProviderAuthorization::PROVIDER_NAMES[provider].downcase
          .stacked
            = link_to url, class: "btn btn-primary btn-lg providerlink #{provider_name}" do
              %i.fa{ class: "fa-#{}"}
              - if is_sign_up?
                = t(:sign_up_with_provider, provider: ProviderAuthorization::PROVIDER_NAMES[provider] )
              - else
                = t(:sign_in_with_provider, provider: ProviderAuthorization::PROVIDER_NAMES[provider] )
