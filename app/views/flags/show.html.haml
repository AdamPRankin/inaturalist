- content_for(:title) do
  - @title = "Flag for #{link_to(@object.to_plain_s, @object) rescue @object.to_plain_s}".html_safe
  = strip_tags @title
- content_for :extrajs do
  :javascript
    $("#comment_body").textcompleteUsers( );
.container
  .row
    .col-xs-12
      .breadcrumbs
        %strong
          = link_to t(:back_to_flags_html), url_for_referrer_or_default( url_for( @flag.flaggable.is_a?( Photo ) ? @flag.flaggable.becomes( Photo ) : @flag.flaggable ) )
        = link_to t(:view_all_flags), flags_url, class: "pull-right"
      %h2= @title
  .row
    .col-xs-12
      - if [Flag::SPAM, Flag::COPYRIGHT_INFRINGEMENT].include?( @flag.flag )
        .alert.alert-warning
          =t "views.flags.show.flags_that_should_not_be_resolved_desc_html"
      %table.table
        %thead
          %tr
            %th=t :created
            %th=t :object
            %th=t :flagger
            %th=t :reason
            %th=t :resolved_by
            %th=t :resolve_comment
        %tbody
          %tr
            %td=l @flag.created_at
            %td= link_to @object.to_plain_s, @object
            %td
              - if @flag.user
                = link_to @flag.user.login, @flag.user
              - elsif @flag.user_id == 0
                = @site.site_name_short
              - else
                =t :deleted_user
            %td=formatted_user_text @flag.flag
            %td
              - unless @flag.resolver.nil?
                = link_to @flag.resolver.login, @flag.resolver
              - else
                =t :not_resolved
            %td.nobr.form-inline
              - if is_curator?
                = form_for( @flag, action: "update", html: { class: "inlineblock" } ) do |f|
                  = f.text_field :comment, class: "form-control"
                  = f.hidden_field :resolver_id, value: current_user.id
                  = f.hidden_field :resolved, value: true
                  = f.submit t(:resolve), class: "btn btn-success"
              - else
                = formatted_user_text @flag.comment
              - if @flag.flaggable.respond_to?(:moderator_actions)
                - if @flag.flaggable.hidden?
                  Hidden by
                  = link_to_user @flag.flaggable.moderator_actions.sort_by(&:id).last.user
                - else
                  %button.btn.btn-default{ type: "button", role: "button", "data-toggle" => "modal", "data-target" => "#moderator-action"}
                    =t "hide_#{@flag.flaggable_type.underscore}"
              - if is_me?( @flag.user )
                = link_to @flag, class: "btn btn-link", data: { confirm: t(:you_sure_delete_flag?) }, method: :delete do
                  %i.fa.fa-trash
                  = t(:delete)
  .row
    .col-xs-8
      = render "comments/comments", parent: @flag
      - unless is_me?( @flag.user )
        .upstacked
          = render "subscriptions/subscription", resource: @flag

#moderator-action.modal.fade
  .modal-dialog{ role: "document" }
    .modal-content
      .modal-header
        %button.close{:type => "button", "data-dismiss" => "modal"} x
        %h4.modal-title=t "hide_#{@flag.flaggable_type.underscore}"
      .modal-body
        .container-fluid
          .row
            .col-xs-12
              %p
                Hiding content is for extremely inappropriate content, e.g. hate speech, pornography, etc. When content is "hidden" it will only be visible to site curators, staff, and the person who authored the content. Other people will see a notice that there is hidden content present. Only staff can un-hide content after it has been hidden, and you cannot edit or remove this action after you've committed it.
              = form_for ModeratorAction.new( resource: @flag.flaggable ), builder: BootstrapFormBuilder do |f|
                = f.text_area :reason, required: true
                = f.hidden_field :action, value: ModeratorAction::HIDE
                = f.hidden_field :resource_type
                = f.hidden_field :resource_id
                = f.submit t( "hide_#{@flag.flaggable_type.underscore}" ), class: "btn btn-primary"
                %small.required.pull-right
                  *
                  =t :required_field
